9+10
1:100
y <- c(2,3,4,5,6)
x <- 1:5
x * y
remove(x)
# HELP ON PLOTS
?plot
# LOAD DATASETS PACKAGE
require("datasets")
# ONE ROW PER CASE
?chickwts
chickwts  # Look at data
data(chickwts)  # Load data into workspace
# Quickest Method
plot(chickwts$feed)  # Plot feed from chickwts
# "barplot" offers more control but must prepare data:
# R doesn't create bar charts directly from the categorical
# variables; instead, we must first create a table that
# has the frequencies for each level of the variable.
feeds <- table(chickwts$feed)
feeds
chickwts$feed
# To put the bars in descending order, add "order":
barplot(feeds[order(feeds, decreasing = TRUE)])
barplot(chickwts$feed)
# To put the bars in descending order, add "order":
barplot(feeds[order(feeds, decreasing = FALSE)])
# To put the bars in descending order, add "order":
barplot(feeds[order(feeds, increasing = FALSE)])
# Customize the chart
par(oma = c(1, 1, 1, 1))  # Sets outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(feeds[order(feeds)],
horiz  = TRUE,
las    = 1,  # las gives orientation of axis labels
col    = c("beige", "blanchedalmond", "bisque1", "bisque2", "bisque3", "bisque4"),
border = NA,  # No borders on bars
main   = "Frequencies of Different Feeds\nin chickwts Dataset",  # \n = line break
xlab   = "Number of Chicks")
?par
rm(list = ls())  # Clean up
# ONE ROW PER CASE
data(chickwts)
# Create a table with frequencies
feeds <- table(chickwts$feed)
# Make the pie chart with the defaults
pie(feeds)
# Modify the pie chart
pie(feeds[order(feeds, decreasing = TRUE)],
init.angle = 90,   # Starts as 12 o'clock instead of 3
clockwise = TRUE,  # Default is FALSE
col = c("seashell", "cadetblue2", "lightpink", "lightcyan", "plum1", "papayawhip"),
main = "Pie Chart of Feeds from chickwts")
# THE PROBLEM WITH PIE CHARTS
# Three data sets
pie.a <- c(22, 14, 18, 20, 14, 12)
pie.b <- c(20, 18, 16, 18, 16, 12)
pie.c <- c(12, 14, 20, 18, 14, 22)
par()
# Changing graphical parameters for a minute
oldpar <- par()   # Stores old graphical parameters
par(mfrow    = c(1, 3),  # Num. rows/cols
cex.main = 3)   #  Main title 3x bigger
colors <- c("grey98", "grey90", "lightskyblue", "lightgreen", "grey98", "grey90")
# Three pie charts side by side
# Is the green slice or blue slice bigger?
pie(pie.a, main = "Pie A", col = colors)
pie(pie.b, main = "Pie B", col = colors)
pie(pie.c, main = "Pie C", col = colors)
# Three bar charts side by side
# Is the green bar or blue bar bigger?
barplot(pie.a, main = "Bar A", col = colors)
barplot(pie.b, main = "Bar B", col = colors)
barplot(pie.c, main = "Bar C", col = colors)
# CONCLUSION
# From R help on pie charts:
?pie
par(oldpar)  # Restore old graphical parameters
# Note that cin, cra, csi, cxy, and din are read-only
# parameters that were written to oldpar but cannot be
# rewritten; just ignore the warning messages for these.
?par
rm(list = lm())  # Clean up
?lynx
data(lynx)  # Annual Canadian Lynx trappings 1821-1934
# Make a histogram using the defaults
hist(lynx)
rm(list = ls())  # Clean up
# LOAD DATASETS PACKAGE
require("datasets")
?lynx
data(lynx)  # Annual Canadian Lynx trappings 1821-1934
# Make a histogram using the defaults
hist(lynx)
# Modify histogram
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
# IF freq = FALSE, this will draw normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
freq = FALSE,
add = TRUE)
?curve
rm(list = ls())  # Clean up
?lynx
data(lynx)  # Annual Canadian Lynx trappings 1821-1934
# Make a histogram using the defaults
hist(lynx)
# Modify histogram
h <- hist(lynx,  # Save histogram as object
breaks = 11,  # "Suggests" 11 bins
#           breaks = seq(0, 7000, by = 100),
#           breaks = c(0, 100, 300, 500, 3000, 3500, 7000),
freq = FALSE,
col = "thistle1", # Or use: col = colors() [626]
main = "Histogram of Annual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx Trapped")
# IF freq = FALSE, this will draw normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
rm(list = ls())  # Clean up
# Lawyers' Ratings of State Judges in the US Superior Court (c. 1977)
?USJudgeRatings
USJudgeRatings  # View data
data(USJudgeRatings)  # Load into workspace
?data
# Make boxplot using the defaults
boxplot(USJudgeRatings$RTEN)
# Modify boxplot
boxplot(USJudgeRatings$RTEN,
horizontal = TRUE,
las = 1,  # Make all labels horizontal
notch = TRUE,  # Notches for CI for median
ylim = c(0, 10),  # Specify range on Y axis
col = "slategray3",   # R's named colors (n = 657)
#         col = colors() [602], # R's color numbers
#         col = "#9FB6CD",      # Hex codes for RBG
#         col = rgb(159, 182, 205, max = 255),  # RGB triplet with max specified
boxwex = 0.5,  # Width of box as proportion of original
whisklty = 1,  # Whisker line type; 1 = solid line
staplelty = 0,  # Staple (line at end) type; 0 = none
outpch = 16,  # Symbols for outliers; 16 = filled circle
outcol = "slategray3",  # Color for outliers
main = "Lawyers' Ratings of State Judges in the\nUS Superior Court (c. 1977)",
xlab = "Lawyers' Ratings")
# Multiple boxplots
boxplot(USJudgeRatings,
horizontal = TRUE,
las = 1,  # Make all labels horizontal
notch = TRUE,  # Notches for CI for median
ylim = c(0, 10),  # Specify range on Y axis
col = "slategray3",   # R's named colors (n = 657)
boxwex = 0.5,  # Width of box as proportion of original
whisklty = 1,  # Whisker line type; 1 = solid line
staplelty = 0,  # Staple (line at end) type; 0 = none
outpch = 16,  # Symbols for outliers; 16 = filled circle
outcol = "slategray3",  # Color for outliers
main = "Lawyers' Ratings of State Judges in the\nUS Superior Court (c. 1977)",
xlab = "Lawyers' Ratings")
rm(list = ls())  # Clean up
?swiss
swiss
str(swiss)
data(swiss)
fertility <- swiss$Fertility
prop.test(x, n)
x <- c(13, 17)
n <- c(23, 21)
prop.test(x, n)
x <- (6, 9)
x <- c(6, 9)
n <- c(13, 16)
x <- c(6, 11)
prop.test(x, n)
?rnorm
rnorm
demo()
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("KernSmooth")
?KernSmooth
??KernSmooth
require(KernSmooth)
x <- 1
print(x)
x
msg <- "Hello"
print(msg)
?vector
y <- c(1.7, "a")
y
x <- c("a", "b", "c", "d")
for (letter in x) print(letter)
?seq_along
?seq_len
?length
?sd
args(mean)
args(lm)
search
library(ggplot2)
search
search(ggplot2)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
sturcture(p)
structure(p)
unclass(p)
?strptime
x
y <- Sys.time()
y
x-y
x+y
install.packages("swirl")
library(swirl)
getwd()
library(xlsx)
library(rJava)
library(rJava)
install.packages("rJava",,"http://rforge.net/",type="source")
library(rJava)
library(rJava)
install.packages("rJava",,"http://rforge.net/",type="source")
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(rJava)
install.packages("openxlsx")
install.packages("readxl")
remove.packages("rJava")
install.packages("rJava", repos="http//rforge.net", type="source")
install.packages("rJava")
library("rJava")
install.packages("rJava",,"http://rforge.net/",type="source")
swirl()
library(swirl)
swirl()
library(rJava)
library(rJava)
library(xlsx)
update.packages(ask = FALSE)
?q
swirl()
library(swirl)
swirl()
q()
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(0.975, df = 2)
myplot2(20)
sleep
range(g1)
range(g2)
g2 - g1
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(0.975, 9)*s/sqrt(10)
t.test(g1, g2)$conf.int
t.test(difference)$conf.int
(8-1)*15.34^2+(21-1)*18.23^2
sp <- (8-1)*15.34^2+(21-1)*18.23^2
ns <- 21+8-2
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*qt(0.975, ns)*sp*sqrt(sum(1/8+1/21))
132.86-127.44+c(-1,1)*qt(0.975, ns)*sp*sqrt(1/8+1/21))
132.86-127.44+c(-1,1)*qt(0.975, ns)*sp*sqrt(1/8+1/21)
sp <- sqrt((9*var(g1) + 9*var(g2))/18_
sp <- sqrt((9*var(g1) + 9*var(g2))/18)
md + c(-1,1)*qt(0.975, 18)*sp*sqrt(1/5)
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = TRUE)$conf
(15.34/8)^2/7 + (18.23/21)^2/20
num <- (15.34^2/8 + 18.23^2/21)^2
15.34^4/8^2/7 + 18.23^4/21^2/20
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86 - 127.44 + c(-1,1)*qt(0.975, mydf)*sqrt(15.34^2 + 18.23^2)
132.86 - 127.44 + c(-1,1)*qt(0.975, mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
(32-30)/1
2/(10/4)
15
q(0.95,15)
qt(0.95,15)
dim(fs)
t.test(fs$fheight, fs$sheight, paired = TRUE)
11.7885* sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5, 15, lower.tail = FALSE)
qnorm(0.95)
qnorm(0.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, size = 8, prob = 0.5)
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
pbinom(7, size = 8, prob = 0.5, lower.tail = TRUE)
ppois(9. 5. lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
?pt
1100 + c(-1,1)*qt(0.95, 8)*(30/3)
1100 + c(-1,1)*qt(0.975, 8)*(30/3)
-2 + c(-1,1)*qt(0.975, 8)*(0.3/3)
-2 + c(-1,1)*qt(0.975, 8)*(1.5/3)
-2 + c(-1,1)*qt(0.975, 8)*(2.1/3)
-2 + c(-1,1)*qt(0.975, 8)*(2.6/3)
sp <- (9*0.6^2 + 9*0.68^2)/18
3 - 5 + c(-1,1)*qt(0.975,18)*sp*sqrt(2/10)
3 - 5 + c(-1,1)*qt(0.95,18)*sp*sqrt(2/10)
3 - 5 + c(-1,1)*qt(0.975,18)*sqrt(sp)*sqrt(2/10)
sp <- (9*0.6 + 9*0.68)/18
3 - 5 + c(-1,1)*qt(0.975,18)*sqrt(sp)*sqrt(2/10)
qt(0.95,10)
qt(0.9,10)
6-4+c(-1,1)*qnorm(0.975)*sqrt(0.5^2/100 + 2^2/100)
-3-1+c(-1,1)*qt(0.95, 16)*sqrt(2/9)*sqrt((8*1.5^2+8*1.8^2)/16)
6-4+c(-1,1)*qnorm(0.975)*sqrt(2/100)*sqrt((99*0.25+99*4)/198)
power.t.test(power = 0.8, delta = 0.5, sd = 1, type = "one.sample", alternative = "one.sided")
power.t.test(alpha = 0.01, power = 0.8, delta = 0.5, sd = 1, type = "one.sample", alternative = "one.sided")
power.t.test(sig.level = 0.01, power = 0.8, delta = 0.5, sd = 1, type = "one.sample", alternative = "one.sided")
mean
method("mean")
methods("mean")
show
methods("show")
showMethods("show")
getS3method("mean", "default")
dirname(sys.frame(1)$ofile)
library(rstudioapi)
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()$path
getwd()
ls
shiny::runApp('Onedrive-qh78/OneDrive - Cornell University/Coursera/Data Science/Data Science Capstone/Predict_Next_Word_by_Qinan')
runApp('Onedrive-qh78/OneDrive - Cornell University/Coursera/Data Science/Data Science Capstone/Predict_Next_Word_by_Qinan')
runApp('Onedrive-qh78/OneDrive - Cornell University/Coursera/Data Science/Data Science Capstone/Predict_Next_Word_by_Qinan')
shiny::runApp('Onedrive-qh78/OneDrive - Cornell University/Coursera/Data Science/Data Science Capstone/Predict_Next_Word_by_Qinan')
setwd("~/Onedrive-qh78/OneDrive - Cornell University/Coursera/Data Science/Data Science Capstone/Predict_Next_Word_by_Qinan")
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
SOS <- read_csv("data/SOS_word_candidate.csv")
four_gram_freq <- read_csv("data/four_gram_freq.csv")
three_gram_freq <- read_csv("data/three_gram_freq.csv")
two_gram_freq <- read_csv("data/two_gram_freq.csv")
word_freq <- read_csv("data/word_freq.csv")
contractions <- read_csv("data/contractions.csv")
SBO_word_prediction("good.", four_gram_freq, three_gram_freq, two_gram_freq, word_freq, contractions, SOS)
SOS$SOS_word
runApp()
